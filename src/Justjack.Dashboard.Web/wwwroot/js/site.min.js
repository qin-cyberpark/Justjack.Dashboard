'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//common
Date.prototype.yyyymmdd = function (splitter) {
    splitter = splitter || '\/';
    var mm = this.getMonth() + 1; // getMonth() is zero-based
    var dd = this.getDate();

    return [this.getFullYear(), splitter, mm < 10 ? '0' : '', mm, splitter, dd < 10 ? '0' : '', dd].join('');
};

//application

var SiteApp = function () {
    function SiteApp() {
        _classCallCheck(this, SiteApp);
    }

    _createClass(SiteApp, [{
        key: 'contractor',
        value: function contractor() {}
    }, {
        key: 'init',
        value: function init() {
            ReactDOM.render(React.createElement(SignoutBar, null), document.getElementById('signout-bar'));
        }

        //show page

    }, {
        key: 'show',
        value: function show(pageId) {
            pageId = pageId || "Login";
            var fun = this["show" + pageId];
            if (fun) {
                fun.apply(this);
            }
        }
        //login

    }, {
        key: 'showLogin',
        value: function showLogin() {
            ReactDOM.render(React.createElement(LoginBar, { username: $("#username"), password: $("#password") }), document.getElementById('login-bar'));
        }

        //dashboard

    }, {
        key: 'showDashboard',
        value: function showDashboard() {
            ReactDOM.render(React.createElement(
                MainContent,
                { title: 'Dashboard', subTitle: 'in progress' },
                React.createElement(Dashboard, null)
            ), document.getElementById('main-content'));
        }

        //selling overall

    }, {
        key: 'showSellingOverall',
        value: function showSellingOverall() {
            ReactDOM.render(React.createElement(
                MainContent,
                { title: 'Selling', subTitle: 'overall' },
                React.createElement(SellingOverall, { id: 'selling-overall' })
            ), document.getElementById('main-content'));
        }

        //selling sigle

    }, {
        key: 'showSellingSingle',
        value: function showSellingSingle() {
            ReactDOM.render(React.createElement(
                MainContent,
                { title: 'Selling', subTitle: 'by product' },
                React.createElement(SellingSingle, { id: 'selling-single' })
            ), document.getElementById('main-content'));
        }

        //global

    }]);

    return SiteApp;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AsyncButton = function (_React$Component) {
    _inherits(AsyncButton, _React$Component);

    function AsyncButton(props) {
        _classCallCheck(this, AsyncButton);

        var _this = _possibleConstructorReturn(this, (AsyncButton.__proto__ || Object.getPrototypeOf(AsyncButton)).call(this, props));

        _this.state = { isPending: false };
        return _this;
    }

    _createClass(AsyncButton, [{
        key: "handleClick",
        value: function handleClick() {
            var _props,
                _this2 = this;

            this.setState({ isPending: true });

            var promise = (_props = this.props).onClick.apply(_props, arguments);
            if (promise && promise.then) {
                promise.then(function () {
                    //fulfilled
                    _this2.setState({ isPending: false });
                }).catch(function (error) {
                    //rejected
                    _this2.setState({ isPending: false });
                });
            } else {
                this.setState({ isPending: false });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var extClassName = this.state.isPending ? " pending" : "";
            return React.createElement(
                "button",
                { type: "button", className: this.props.className + " async-button" + extClassName, disabled: this.state.isPending, onClick: this.handleClick.bind(this) },
                React.createElement("i", { className: "fa fa-spinner glyphicon-spin" }),
                this.props.text
            );
        }
    }]);

    return AsyncButton;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dashboard = function (_React$Component) {
    _inherits(Dashboard, _React$Component);

    function Dashboard(props) {
        _classCallCheck(this, Dashboard);

        return _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).call(this, props));
    }

    _createClass(Dashboard, [{
        key: 'render',
        value: function render() {
            var divStyle = {
                height: '100%',
                textAlign: 'center',
                backgroundColor: 'white'
            };
            return React.createElement(
                'div',
                { className: 'row' },
                React.createElement('div', { style: divStyle })
            );
        }
    }]);

    return Dashboard;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LoginBar = function (_React$Component) {
    _inherits(LoginBar, _React$Component);

    function LoginBar(props) {
        _classCallCheck(this, LoginBar);

        var _this = _possibleConstructorReturn(this, (LoginBar.__proto__ || Object.getPrototypeOf(LoginBar)).call(this, props));

        _this.state = { msg: '', isErrorMsg: false };
        return _this;
    }

    _createClass(LoginBar, [{
        key: 'login',
        value: function login() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.setState({ msg: '' });
                var loginVM = { username: _this2.props.username.val(), password: _this2.props.password.val() };
                $.post("/home/login", loginVM, function (result) {
                    if (result.succeeded) {
                        //redirect to
                        this.setState({ msg: 'Login succeeded, redirect ...', isErrorMsg: false });
                        window.location.href = "/";
                    } else {
                        //failed
                        this.setState({ msg: result.message, isErrorMsg: true });
                        reject();
                    }
                }.bind(_this2)).fail(function (result) {
                    this.setState({ msg: 'Login failed, try again.', isErrorMsg: true });
                    reject();
                }.bind(_this2));
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                    'div',
                    { className: 'col-xs-8' },
                    React.createElement(
                        'span',
                        { className: this.state.isErrorMsg ? 'text-danger' : 'text-success' },
                        this.state.msg
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'col-xs-4' },
                    React.createElement(AsyncButton, { className: 'btn btn-primary btn-block btn-flat', text: 'Sign In', onClick: this.login.bind(this) })
                )
            );
        }
    }]);

    return LoginBar;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContentHeader = function (_React$Component) {
    _inherits(ContentHeader, _React$Component);

    function ContentHeader(props) {
        _classCallCheck(this, ContentHeader);

        return _possibleConstructorReturn(this, (ContentHeader.__proto__ || Object.getPrototypeOf(ContentHeader)).call(this, props));
    }

    _createClass(ContentHeader, [{
        key: 'handleClick',
        value: function handleClick() {}
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'section',
                { className: 'content-header' },
                React.createElement(
                    'h1',
                    null,
                    this.props.title || 'Dashboard',
                    React.createElement(
                        'small',
                        null,
                        this.props.subTitle || 'JustJack'
                    )
                )
            );
        }
    }]);

    return ContentHeader;
}(React.Component);

var MainContent = function (_React$Component2) {
    _inherits(MainContent, _React$Component2);

    function MainContent(props) {
        _classCallCheck(this, MainContent);

        return _possibleConstructorReturn(this, (MainContent.__proto__ || Object.getPrototypeOf(MainContent)).call(this, props));
    }

    _createClass(MainContent, [{
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                { className: 'content-wrapper' },
                React.createElement(ContentHeader, { title: this.props.title, subTitle: this.props.subTitle }),
                React.createElement(
                    'section',
                    { className: 'content' },
                    this.props.children
                )
            );
        }
    }]);

    return MainContent;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SellingOverall = function (_React$Component) {
    _inherits(SellingOverall, _React$Component);

    function SellingOverall(props) {
        _classCallCheck(this, SellingOverall);

        var _this = _possibleConstructorReturn(this, (SellingOverall.__proto__ || Object.getPrototypeOf(SellingOverall)).call(this, props));

        var today = new Date();

        _this.state = {
            hasInited: false,
            dtFrom: today.yyyymmdd('-'),
            dtTo: today.yyyymmdd('-'),
            msg: ''
        };

        //binding
        _this.onDateFromChanged = _this.onDateFromChanged.bind(_this);
        _this.onDateToChanged = _this.onDateToChanged.bind(_this);
        return _this;
    }

    //condition changed


    _createClass(SellingOverall, [{
        key: 'onDateFromChanged',
        value: function onDateFromChanged(e) {
            this.setState({ dtFrom: e.target.value });
        }
    }, {
        key: 'onDateToChanged',
        value: function onDateToChanged(e) {
            this.setState({ dtTo: e.target.value });
        }

        //pull data

    }, {
        key: 'query',
        value: function query() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                //do request
                var record = [];
                var url = ["/query/selling/overall?f=", _this2.state.dtFrom, '&t=', _this2.state.dtTo].join('');
                $.get(url, function (result) {
                    if (result.succeeded) {
                        //show data
                        this.show(result.data);
                        resolve();
                    } else {
                        //failed
                        this.setState({ msg: result.message || 'Query failed, try again.' });
                        reject();
                    }
                }.bind(_this2)).fail(function (result) {
                    this.setState({ msg: 'Query failed, try again.' });
                    reject();
                }.bind(_this2));
            });
        }
    }, {
        key: 'show',
        value: function show(records) {
            var table = $('#' + this.props.id);
            if (!this.state.hasInited) {
                table.DataTable({
                    "data": records,
                    columns: [{ data: "code" }, { data: "name" }, { data: "unitPrice", className: "dt-body-right" }, { data: "orders", className: "dt-body-right" }, { data: "quantity", className: "dt-body-right" }, { data: "amount", className: "dt-body-right" }],
                    "paging": true,
                    "pageLength": 50,
                    "lengthChange": true,
                    "searching": true,
                    "ordering": true,
                    "info": true,
                    "autoWidth": true
                });
                this.setState({ hasInited: true });
            } else {
                table.DataTable().clear();
                table.DataTable().rows.add(records);
                table.DataTable().draw();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var extTblClass = this.state.hasInited ? "" : " uninited";

            return React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                    'div',
                    { className: 'col-xs-12 box' },
                    React.createElement(
                        'div',
                        { className: 'box-body' },
                        React.createElement(
                            'div',
                            { className: 'row' },
                            React.createElement(
                                'div',
                                { className: 'col-xs-10' },
                                React.createElement(
                                    'div',
                                    { className: 'input-group' },
                                    React.createElement(
                                        'label',
                                        { className: 'input-group-addon' },
                                        'From'
                                    ),
                                    React.createElement('input', { className: 'form-control', type: 'date', value: this.state.dtFrom, onChange: this.onDateFromChanged }),
                                    React.createElement(
                                        'label',
                                        { className: 'input-group-addon' },
                                        'To'
                                    ),
                                    React.createElement('input', { className: 'form-control', type: 'date', value: this.state.dtTo, onChange: this.onDateToChanged })
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'col-xs-2' },
                                React.createElement(AsyncButton, { className: 'btn btn-primary btn-flat pull-right', text: 'Query', onClick: this.query.bind(this) })
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'row selling-table-msg-bar' },
                            React.createElement(
                                'span',
                                { className: 'text-danger' },
                                this.state.msg
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'row' },
                            React.createElement(
                                'table',
                                { id: this.props.id, className: 'row-border stripe', style: { width: '100%' } },
                                React.createElement(
                                    'thead',
                                    null,
                                    React.createElement(
                                        'tr',
                                        null,
                                        React.createElement(
                                            'th',
                                            null,
                                            'Code'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Name'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Price'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Orders'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Qty.'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Amount'
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return SellingOverall;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SellingSingle = function (_React$Component) {
    _inherits(SellingSingle, _React$Component);

    function SellingSingle(props) {
        _classCallCheck(this, SellingSingle);

        var _this = _possibleConstructorReturn(this, (SellingSingle.__proto__ || Object.getPrototypeOf(SellingSingle)).call(this, props));

        var today = new Date();

        _this.state = {
            hasInited: false,
            keyword: '',
            dtFrom: today.yyyymmdd('-'),
            dtTo: today.yyyymmdd('-'),
            msg: ''
        };

        //binding
        _this.onKeywordChanged = _this.onKeywordChanged.bind(_this);
        _this.onDateFromChanged = _this.onDateFromChanged.bind(_this);
        _this.onDateToChanged = _this.onDateToChanged.bind(_this);
        return _this;
    }

    //condition changed


    _createClass(SellingSingle, [{
        key: 'onKeywordChanged',
        value: function onKeywordChanged(e) {
            this.setState({ keyword: e.target.value });
        }
    }, {
        key: 'onDateFromChanged',
        value: function onDateFromChanged(e) {
            this.setState({ dtFrom: e.target.value });
        }
    }, {
        key: 'onDateToChanged',
        value: function onDateToChanged(e) {
            this.setState({ dtTo: e.target.value });
        }

        //pull data

    }, {
        key: 'query',
        value: function query() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                //do request
                var record = [];
                var url = ["/query/selling/single?k=", _this2.state.keyword, "&f=", _this2.state.dtFrom, '&t=', _this2.state.dtTo].join('');
                $.get(url, function (result) {
                    if (result.succeeded) {
                        //show data
                        this.show(result.data);
                        this.setState({ msg: result.message });
                        resolve();
                    } else {
                        //failed
                        this.setState({ msg: result.message || 'Query failed, try again.' });
                        reject();
                    }
                }.bind(_this2)).fail(function (result) {
                    this.setState({ msg: 'Query failed, try again.' });
                    reject();
                }.bind(_this2));
            });
        }
    }, {
        key: 'show',
        value: function show(records) {
            var table = $('#' + this.props.id);
            if (!this.state.hasInited) {
                table.DataTable({
                    "data": records,
                    columns: [{ data: "code" }, { data: "name" }, { data: "unitPrice", className: "dt-body-right" }, { data: "quantity", className: "dt-body-right" }, { data: "orderCode" }, { data: "paidTime" }],
                    "paging": true,
                    "pageLength": 50,
                    "lengthChange": true,
                    "searching": true,
                    "ordering": true,
                    "info": true,
                    "autoWidth": true
                });
                this.setState({ hasInited: true });
            } else {
                table.DataTable().clear();
                table.DataTable().rows.add(records);
                table.DataTable().draw();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                    'div',
                    { className: 'col-xs-12 box' },
                    React.createElement(
                        'div',
                        { className: 'box-body' },
                        React.createElement(
                            'div',
                            { className: 'row' },
                            React.createElement(
                                'div',
                                { className: 'col-xs-10' },
                                React.createElement(
                                    'div',
                                    { className: 'input-group' },
                                    React.createElement(
                                        'label',
                                        { className: 'input-group-addon' },
                                        'Code/Name'
                                    ),
                                    React.createElement('input', { type: 'text', className: 'form-control', value: this.state.keyword, onChange: this.onKeywordChanged, placeholder: 'code or name' }),
                                    React.createElement(
                                        'label',
                                        { className: 'input-group-addon' },
                                        'From'
                                    ),
                                    React.createElement('input', { className: 'form-control', type: 'date', value: this.state.dtFrom, onChange: this.onDateFromChanged }),
                                    React.createElement(
                                        'label',
                                        { className: 'input-group-addon' },
                                        'To'
                                    ),
                                    React.createElement('input', { className: 'form-control', type: 'date', value: this.state.dtTo, onChange: this.onDateToChanged })
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'col-xs-2' },
                                React.createElement(AsyncButton, { className: 'btn btn-primary btn-flat pull-right', text: 'Query', onClick: this.query.bind(this) })
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'row selling-table-msg-bar' },
                            React.createElement(
                                'span',
                                { className: 'text-danger' },
                                this.state.msg
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'row' },
                            React.createElement(
                                'table',
                                { id: this.props.id, className: 'row-border stripe', style: { width: '100%' } },
                                React.createElement(
                                    'thead',
                                    null,
                                    React.createElement(
                                        'tr',
                                        null,
                                        React.createElement(
                                            'th',
                                            null,
                                            'Code'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Name'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Price'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Qty.'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Order'
                                        ),
                                        React.createElement(
                                            'th',
                                            null,
                                            'Paid'
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return SellingSingle;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SellingTable = function (_React$Component) {
    _inherits(SellingTable, _React$Component);

    function SellingTable(props) {
        _classCallCheck(this, SellingTable);

        var _this = _possibleConstructorReturn(this, (SellingTable.__proto__ || Object.getPrototypeOf(SellingTable)).call(this, props));

        var today = new Date();

        _this.state = {
            hasInited: false,
            dtFrom: today.yyyymmdd('-'),
            dtTo: today.yyyymmdd('-'),
            msg: ''
        };

        //binding
        _this.onDateFromChanged = _this.onDateFromChanged.bind(_this);
        _this.onDateToChanged = _this.onDateToChanged.bind(_this);
        return _this;
    }

    //condition changed


    _createClass(SellingTable, [{
        key: 'onDateFromChanged',
        value: function onDateFromChanged(e) {
            this.setState({ dtFrom: e.target.value });
        }
    }, {
        key: 'onDateToChanged',
        value: function onDateToChanged(e) {
            this.setState({ dtTo: e.target.value });
        }

        //pull data

    }, {
        key: 'query',
        value: function query() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                //do request
                var record = [];
                var url = ["/query/selling?f=", _this2.state.dtFrom, '&t=', _this2.state.dtTo].join('');
                console.log(url);
                $.get(url, function (result) {
                    if (result.succeeded) {
                        //show data
                        this.show(result.data);
                        resolve();
                    } else {
                        //failed
                        this.setState({ msg: result.message || 'Query failed, try again.' });
                        reject();
                    }
                }.bind(_this2)).fail(function (result) {
                    this.setState({ msg: 'Query failed, try again.' });
                    reject();
                }.bind(_this2));
            });
        }
    }, {
        key: 'show',
        value: function show(records) {
            console.log("show");
            var table = $('#' + this.props.id);
            if (!this.state.hasInited) {
                table.DataTable({
                    "data": records,
                    "paging": true,
                    "lengthChange": true,
                    "searching": true,
                    "ordering": true,
                    "info": true,
                    "autoWidth": true
                });
                this.setState({ hasInited: true });
            } else {
                table.DataTable().clear();
                table.DataTable().rows.add(records);
                table.DataTable().draw();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var tableStyle = {
                display: this.state.hasInited ? "" : "none",
                width: '100%'
            };

            return React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                    'div',
                    { className: 'col-xs-12 box' },
                    React.createElement(
                        'div',
                        { className: 'box-body' },
                        React.createElement(
                            'div',
                            null,
                            React.createElement('input', { type: 'date', value: this.state.dtFrom, onChange: this.onDateFromChanged }),
                            React.createElement('input', { type: 'date', value: this.state.dtTo, onChange: this.onDateToChanged }),
                            React.createElement(AsyncButton, { className: 'btn btn-primary btn-flat', text: 'Query', onClick: this.query.bind(this) }),
                            React.createElement(
                                'span',
                                { className: 'text-danger' },
                                this.state.msg
                            )
                        ),
                        React.createElement(
                            'table',
                            { id: this.props.id, className: 'table table-striped table-bordered', style: tableStyle },
                            React.createElement(
                                'thead',
                                null,
                                React.createElement(
                                    'tr',
                                    null,
                                    React.createElement(
                                        'th',
                                        null,
                                        'Name'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Position'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Office'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Extn.'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Start date'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Salary'
                                    )
                                )
                            ),
                            React.createElement(
                                'tfoot',
                                null,
                                React.createElement(
                                    'tr',
                                    null,
                                    React.createElement(
                                        'th',
                                        null,
                                        'Name'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Position'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Office'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Extn.'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Start date'
                                    ),
                                    React.createElement(
                                        'th',
                                        null,
                                        'Salary'
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return SellingTable;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SignoutBar = function (_React$Component) {
    _inherits(SignoutBar, _React$Component);

    function SignoutBar(props) {
        _classCallCheck(this, SignoutBar);

        var _this = _possibleConstructorReturn(this, (SignoutBar.__proto__ || Object.getPrototypeOf(SignoutBar)).call(this, props));

        _this.state = { msg: '' };

        //binding
        _this.signout = _this.signout.bind(_this);
        return _this;
    }

    _createClass(SignoutBar, [{
        key: 'signout',
        value: function signout() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.setState({ msg: '' });
                $.post("/home/signout", function (result) {
                    if (result.succeeded) {
                        //redirect to
                        window.location.href = result.data;
                    }
                }.bind(_this2)).fail(function (result) {
                    this.setState({ msg: 'Signout failed.' });
                    reject();
                }.bind(_this2));
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                { className: 'text-center' },
                React.createElement(
                    'div',
                    { className: 'danger' },
                    this.state.msg
                ),
                React.createElement(AsyncButton, { className: 'btn btn-default btn-flat', onClick: this.signout, text: 'Sign Out' })
            );
        }
    }]);

    return SignoutBar;
}(React.Component);